//--------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Wasm.SDK.
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------------------

{{ for using in Usings ~}}
using {{ using }};
{{ end ~}}

namespace {{Class.Namespace}}
{
    public sealed class {{ Class.ProxyName }} : {{ Class.Name }}
    {
        {{~ for ctor in Class.Constructors ~}}
        private {{ Class.ProxyName ~}} ({{ ctor.Parameters | array.map "ManagedParam" | array.join ", " }}) : base({{ ctor.Parameters | array.map "Name" | array.join ", " }})
        {
        }

        {{~ end ~}}

        {{~ for ctor in Class.Constructors ~}}
        public static IntPtr {{ ctor.ProxyName ~}} ({{ ctor.Parameters | array.map "ManagedParam" | array.join ", " }})
        {
            var instance = new {{ Class.ProxyName }}(
                {{ ctor.Parameters | array.map "ManagedName" | array.join ", \n                " }}
            );

            var handle = GCHandle.Alloc(instance, GCHandleType.Normal);
            return (IntPtr)handle;
        }

        {{~ end ~}}

        {{~ for method in Class.Methods ~}}
        public {{ if method.ReturnTypeManipualted && method.IsAsync }}async {{ end }}{{ method.ManagedReturnType }} {{ method.ProxyName ~}} ({{ method.Parameters | array.map "ManagedParam" | array.join ", " }})
        {
            {{ if method.HasReturnValue ~}} var result = {{ end }}{{ if method.ReturnTypeManipualted && method.IsAsync }}await {{ end }}{{ if method.IsStatic }}{{ Class.Name }}{{ else }}base{{ end }}.{{ method.Name }}(
                {{ method.Parameters | array.map "ManagedName" | array.join ", \n                " }}
            );

            {{- if method.HasReturnValue }} 
            return {{ if method.ReturnTypeSerialized }}Wasm.Sdk.JsonSerializationHelper.Serialize(result, nameof({{ method.Name }})); {{ else if method.ReturnTypeTypedArray ~}} {{ method.ReturnType.ProxyType }}.From(new ReadOnlySpan<{{ method.ReturnType.TypedArrayElementType }}>(result)); {{ else }}result; {{ end }}{{ end }}
        }

        {{~ end ~}}
    }
}