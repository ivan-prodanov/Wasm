//--------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Wasm.SDK.
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------------------

import { getMethodInfo, invokeMethod, IWasmResource, WasmHelper } from "./wasmShared"
{{ for tsImport in Imports ~}}
import { {{ tsImport.Types | array.join ", " }} } from "./{{ tsImport.File }}"
{{ end ~}}

{{~ for ctor in Class.Constructors ~}}
interface {{ Class.Name }}CtorArgSet{{ for.index }} extends Record<string, any> {
  {{~ for param in ctor.Parameters ~}}
  {{ param.TsParam }}
  {{~ end ~}}
}
{{~ end ~}}

type {{ Class.Name }}CtorArgs = {{ for ctor in Class.Constructors ~}} {{ Class.Name }}CtorArgSet{{ for.index }}{{ if !for.last }} | {{ else }}; {{ end }} {{ end }}

export default class {{Class.Name}} implements IWasmResource {
  // ctors
  {{~ for ctor in Class.Constructors ~}}
  private static _ctor{{ for.index + 1 }}Ptr : number;
  {{~ end ~}}

  // methods
  {{~ for method in Class.Methods ~}}
  private static _{{ method.TsName }}Ptr : number;
  {{~ end ~}}
  
  // mandatory
  private static _assemblyPtr : number;
  private static _classPtr : number;
  private gcHandlePtr : number;

  /** @internal */
  get gcHandle(): number {
    return this.gcHandlePtr;
  }

  private static get assemblyPtr(): number { 
    if (!{{ Class.Name }}._assemblyPtr){
      {{ Class.Name }}._assemblyPtr = BINDING.assembly_load("{{ Class.AssemblyName }}")
    }

    return {{ Class.Name }}._assemblyPtr;
  }

  private static get classPtr() : number {
    if (!{{ Class.Name }}._classPtr){
      {{ Class.Name }}._classPtr = BINDING.find_class({{Class.Name}}.assemblyPtr, "{{ Class.Namespace }}", "{{ Class.ProxyName }}")
    }

    return {{ Class.Name }}._classPtr;
  }
  {{~ for ctor in Class.Constructors ~}}
  private static get ctor{{ for.index + 1 }}Ptr() : number {
    if (!{{ Class.Name }}._ctor{{ for.index + 1 }}Ptr) {
      {{ Class.Name }}._ctor{{ for.index + 1 }}Ptr = getMethodInfo({{ Class.Name }}.classPtr, "{{ ctor.ProxyName }}", {{ ctor.Parameters.size }});
    }

    return {{ Class.Name }}._ctor{{ for.index + 1 }}Ptr;
  }

  {{~ end ~}}

  {{~ for method in Class.Methods ~}}
  private static get {{method.TsName}}Ptr(): number {
    if (!{{ Class.Name }}._{{ method.TsName }}Ptr) {
      {{ Class.Name }}._{{ method.TsName }}Ptr = getMethodInfo({{ Class.Name }}.classPtr, "{{ method.ProxyName }}", {{ method.Parameters.size }});
    }
    
    return {{ Class.Name }}._{{ method.TsName }}Ptr;
  }

  {{~ end ~}}
  
  constructor(args: {{ Class.Name }}CtorArgs) {
    BINDING.bindings_lazy_init();

    const keyConstraints = Object.keys(args).map(x => `${x}: ${typeof args[x]}`).join(" | ");
    console.log(keyConstraints);

    switch (keyConstraints) {
      {{~ for ctor in Class.Constructors ~}}
      case "{{ ctor.Parameters | array.map "TsParam" | array.join "|" }}": {
        this.gcHandlePtr = invokeMethod({{ Class.Name }}.ctor{{ for.index + 1 }}Ptr, 0, "{{ ctor.Parameters | array.map "Type" | array.map "MonoSignature" | array.join "" }}", [{{~ for param in ctor.Parameters ~}}args.{{ param.Name }}{{ if !for.last}}, {{ end ~}}{{~ end ~}}]);
        break;
      }
      {{~ end ~}}
      default: throw new Error("Unsupported constructor definition");
    }
  }

  {{~ for method in Class.Methods ~}}
  {{ if method.ReturnTypeSerialized && method.IsAsync }}async {{ end }}{{ method.TsName }}({{ method.Parameters | array.map "TsParam" | array.join ", "}}) : {{ method.TsReturnType }} {
    {{ if method.HasReturnValue ~}} var result = {{ end }}{{ if method.ReturnTypeSerialized && method.IsAsync }}await {{ end }}invokeMethod({{ Class.Name }}.{{method.TsName}}Ptr, {{ if method.IsStatic ~}} 0 {{~ else ~}} this.gcHandlePtr {{~ end }}, "{{ method.Parameters | array.map "Type" | array.map "MonoSignature" | array.join "" }}", [{{ method.Parameters | array.map "TsName" | array.join ", " }}]);

    {{- if method.HasReturnValue }} 
    return {{ if method.ReturnTypeSerialized }}JSON.parse(result) as {{ method.ReturnType.TsType }}; {{ else }}result; {{ end }}{{ end }}
  }

  {{~ end ~}}

  free() : void {
    WasmHelper.free(this);
  }
}