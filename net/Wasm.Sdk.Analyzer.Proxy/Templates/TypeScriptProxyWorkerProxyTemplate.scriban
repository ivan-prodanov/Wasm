//--------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Wasm.SDK.
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------------------

{{ for tsImport in Imports ~}}
import { {{ tsImport.Types | array.join ", " }} } from "./{{ tsImport.File }}"
{{ end ~}}
import { default as {{Class.Name}}Worker } from "./{{Class.Name}}Worker"
import { default as {{Class.Name}} } from "./{{Class.Name}}"

export default class {{Class.Name}}WorkerProxy implements {{Class.Name}}Worker {
  _controller!: {{Class.Name}};

  set controller(value: {{Class.Name}}) {
    this._controller = value;
  }

  public static CreateProxy<T extends {{Class.Name}}WorkerProxy>(type: {
    new(): T
  }): { proxy: {{Class.Name}}Worker; _instance: T }  {
    const _instance = new type();

    const proxy = {
    {{~ for method in Class.Methods ~}}
      {{ method.TsName }}: _instance.{{ method.TsName }}.bind(_instance),
    {{~ end ~}}
      free: _instance.free.bind(_instance),
    }

    return {
        proxy,
        _instance
    };
  }

  private ensureControllerSet(): void {
    if (!this._controller) {
      throw new Error("The Controller {{ Class.Name }} is not initialized");
    }
  }

  {{~ for method in Class.Methods ~}}
  async {{ method.TsName }}({{ method.Parameters | array.map "TsParam" | array.join ", "}}) : Promise<{{ method.TsReturnTypeUnwrapped }}> {
    this.ensureControllerSet();
    return await this._controller.{{method.TsName}}({{ method.Parameters | array.map "Name" | array.join ", " }});
  }

  {{~ end ~}}
  async free() : Promise<void> {
    this.ensureControllerSet();
    await this._controller.free();
  }
}